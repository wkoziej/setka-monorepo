[project]
name = "medusa"
version = "0.1.0"
description = "Media Upload & Social Automation Library for personal publishing workflows"
authors = [
    { name = "Wojtas", email = "wojtas@example.com" }
]
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    "google-api-python-client>=2.0.0",
    "google-auth-oauthlib>=1.0.0",
    "requests>=2.25.0",
    "aiohttp>=3.8.0",
    "Pillow>=8.0.0",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.21.0",
    "click>=8.0.0",
]
keywords = ["media", "upload", "social", "automation", "youtube", "facebook"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12"
]

[project.scripts]
medusa = "medusa.main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src/medusa",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=90",
    "--asyncio-mode=auto",
    "-m", "not manual"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests (may take several seconds)",
    "async_test: Async tests requiring event loop",
    "mock_api: Tests using mocked external APIs",
    "manual: Manual tests requiring human interaction (skipped by default)"
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "tests.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[dependency-groups]
dev = [
    "pytest-cov>=5.0.0",
]
