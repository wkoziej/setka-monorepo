[project]
name = "medusa"
version = "0.1.0"
description = "Media Upload & Social Automation Library for personal publishing workflows"
authors = [
    { name = "Wojtas", email = "wojtas@example.com" }
]
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    "google-api-python-client>=2.0.0",
    "google-auth-oauthlib>=1.0.0",
    "requests>=2.25.0",
    "aiohttp>=3.8.0",
    "Pillow>=8.0.0",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.21.0",
    "click>=8.0.0",
]
keywords = ["media", "upload", "social", "automation", "youtube", "facebook"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12"
]

[project.scripts]
medusa = "medusa.main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "manual: Manual tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[dependency-groups]
dev = [
    "pytest-cov>=5.0.0",
]
